#!/bin/bash

SVN_REPO=http://svn.opengeo.org/suite
BUILDS=http://suite.opengeo.org/builds

if [ "$DIST_PATH" == "" ]; then
  DIST_PATH=latest
fi
if [ "$REV" == "" ]; then
  REV=latest
fi

BRANCH=$GIT_BRANCH

PACKAGE=`echo $0 | sed 's#^.*build_##g' | sed 's#\.sh##g'`
RPM_BUILD_ROOT=`pwd`/rpmbuild
RPM_SOURCE_DIR=`pwd`/rpmbuild/SOURCES
RPM_BUILD_DIR=`pwd`/rpmbuild/BUILD
PKG_SOURCE_DIR=${RPM_SOURCE_DIR}/$PACKAGE

# Check EL version so we can force EL6 to build as i686 on 32-bit                                                                   
EL_VERSION=`cut -d ' ' -f 3 /etc/redhat-release | awk '{printf( "%d", $1 )}'`
if [ "$EL_VERSION" -ge "6" ]; then
  ARCH=`uname -p` # returns i686 on 32-bit, x86_64 on 64-bit
else
  ARCH=`uname -i` # returns i386 on 32-bit, x86_64 on 64-bit
fi

# build_info <package>
function build_info() {
  local pkg=$1
  if [ "$pkg" != "" ]; then
     name=$PACKAGE
  fi
  echo "Building $pkg from $DIST_PATH at revision $REV ($BRANCH)"
}

# checkrc <code> <message>
function checkrc() {
  if [ "$1" != 0 ]; then
    echo "$2 failed returning $1"
    exit 1
  fi
}

# check_root
check_root() {
  if [ "$USER" != "root" ]; then
    echo "This script must be run as root"
    exit 1
  fi
}


# get_file <url> [overwrite]
function get_file() {
  local url=$1
  local file=`echo $url | sed 's#http://##g' | xargs basename`

  if [ ! -d files ]; then
     mkdir files
     checkrc $? "mkdir files"
  fi
  overwrite=${OVERWRITE:-$2}
  if [ "$overwrite" != "no" ] ||  [ ! -e files/$file ]; then
     wget $url
     checkrc $? "downloading $url"

     mv $file files
     checkrc $? "mv $file files"
  fi
}

# clean_src
function clean_src() {
  rm -rf ${PKG_SOURCE_DIR}
}

# build_rpm <proper>
function build_rpm() {
  
  # clean out BUILDROOT
  if [ -d ${RPM_BUILD_ROOT}/BUILDROOT ]; then
     rm -rf ${RPM_BUILD_ROOT}/BUILDROOT/*
  fi

  pushd ${RPM_BUILD_ROOT}/SPECS
  rpmbuild --buildroot ${RPM_BUILD_ROOT}/BUILDROOT -bb $PACKAGE.spec
  rc=$?
  popd
  checkrc $rc "rpmbuild"

  if [ ! -d build ]; then
    mkdir build
    checkrc $? "mkdir build"
  fi
  
  rm -rf build/$PACKAGE
  mkdir build/$PACKAGE
  if [ "$1" != "" ]; then
    mv ${RPM_BUILD_ROOT}/RPMS/${ARCH}/*.rpm build/$PACKAGE
  else
    mv ${RPM_BUILD_ROOT}/$PACKAGE-*.rpm build/$PACKAGE
  fi
  checkrc $? "mv rpm"

}

# publish_rpm <profile> <repo> <dist>
publish_rpm() {
  local profile=$1
  local repo=$2
  local dist=$3

  if [ "$repo" == "" ]; then
     repo=$REPO
  fi
  if [ "$repo" == "" ]; then
     echo "repository not specified, aborting publish"
  fi

  if [ "$dist" == "" ]; then
    dist=$DIST
  fi
  if [ "$dist" == "" ]; then
    echo "distribution not specified, aborting publish"
    exit 1
  fi

  pushd build/$PACKAGE
  checkrc $? "push build/$PACKAGE"

  scp -P 7777 -i ~/.ssh/id_rsa_apt * apt@apt.opengeo.org:/home/apt/yum/${profile}/incoming/$repo/$dist
  checkrc $? "secure copy .rpm files"

  ssh -p 7777 -i ~/.ssh/id_rsa_apt apt@apt.opengeo.org "./yum/publish_rpms.sh $repo $dist $(echo $profile|sed 's/\(.\{1,\}\)/-p \1/g')" 
  checkrc $? "remote publish"

  popd
}

